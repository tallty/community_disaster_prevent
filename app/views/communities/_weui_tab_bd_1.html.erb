<div class="weui_tab_bd">
  <div class="weui_content_communities">

    <div class="weui_navbar header">
      <div class="weui_navbar_item weui_bar_item_on" id="head_Map">地图</div>
      <div class="weui_navbar_item" id= "head_List">详情</div>
    </div>

    <div id="map_container"></div>

    <div id="showList" class="row" style="display: none;">
      <% if @disasters.present? != true %>
        <div class="col-xs-12 show_disasters alpha-bg"><h4>当前没有灾情</h4></div>
      <% else %>
        <% @disasters.each do |disaster| %>
          <div class="col-xs-12 show_disasters alpha-bg">
            <div class="row">时间：<%= disaster.occur_time.strftime("%Y-%m-%d %H:%M") %></div>
            <div class="row">类型：<%= disaster.disaster_type %></div>
            <div class="row">说明：<%= truncate(disaster.explain,length: 20) %></div>
            <div class="row">地点：<%= disaster.disaster_position.try(:address) %></div>
          </div>
          <div class="col-xs-12 text-center show_disasters_push alpha-bg">
            <div class="row">
              <%# if disaster.subscriber_id == @subscriber.id %>
               <!--  <div class="col-xs-4">
                  <%= link_to "详细信息", disaster_path(disaster) %>
                </div>
                <div class="col-xs-4">
                  <%= link_to "撤回灾情", disaster_path(disaster), method: :delete %>
                </div>
                <div class="col-xs-4">
                  <%= link_to "上传图片", new_disaster_picture_path(disaster_id: disaster.id) %>
                </div> -->
              <%# else %>
                <div class="col-xs-6">
                  <%= link_to "详细信息", disaster_path(disaster) %>
                </div>
                <div class="col-xs-6">
                  <%= link_to "上传图片", new_disaster_picture_path(disaster_id: disaster.id) %>
                </div>
              <%# end %>
            </div>
          </div>
        <% end %>
      <% end %>
    </div>

    <div class="buttons">
      <a href="<%= new_disaster_position_path %>" data-no-turbolink='true'>
        <i class="iconfont">&#xe600;</i>
        <p>上报</p>
      </a>
      <a href="" onclick="window.location.reload();">
        <i class="iconfont">&#xe60c;</i>
        <p>刷新</p>
      </a>
      <a href="#" id="water_area">
        <%= image_tag "water_area.png", alt: "易积水小区" %>
        <p>小区</p>
      </a>
      <a href="#" id="water_road">
        <%= image_tag "water_road.png", alt: "易积水道路" %>
        <p>道路</p>
      </a>
    </div>

  </div>
</div>

<% content_for :scripts do %>
  <script type="text/javascript" src=http://api.map.baidu.com/api?v=2.0&ak=8SWaIs2cE83Ssvv90yXPUEQQhnkG368u></script>
  <script type="text/javascript" src="http://3gimg.qq.com/lightmap/components/geolocation/geolocation.min.js"></script>
  <script type="text/javascript">
    // Navbar 切换逻辑
    // 地图按钮
    $("#head_Map").on("click", function(){
      $("#head_Map").removeClass("weui_bar_item_on");
      $("#head_List").removeClass("weui_bar_item_on");
      $(this).addClass("weui_bar_item_on");
      $("#map_container").show();
      $("#showList").hide();
      $(".buttons").show();
    });
    // 列表按钮
    $("#head_List").on("click", function(){
      $("#head_Map").removeClass("weui_bar_item_on");
      $("#head_List").removeClass("weui_bar_item_on");
      $(this).addClass("weui_bar_item_on");
      $("#map_container").hide();
      $("#showList").show();
      $(".buttons").hide();
    });

    //屏幕旋转事件监听
    $(window).on('orientationchange', function() {
      window.location.reload();
    });
    
    // ===========地图相关=============
    $(document).ready(function() {
      var u = navigator.userAgent, app = navigator.appVersion;
      var map = new BMap.Map("map_container");
      // 初始化地图，并加载灾情点
      var isIOS = !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/); //ios终端
      if (isIOS) {
        init_data_ios(map);
        console.log('-----IOS------');
      }else{
        init_data(map);
        console.log('-----web------');
      }
      // 处理易积水点
      handleWaterPoint(map);
    })

    // ===========IOS端地图初始化=============
    function init_data_ios(map) {
      var geolocation = new qq.maps.Geolocation("O2KBZ-EILW5-NOJIH-QWO7L-VLF25-QFFDV", "community_disaster_prevent")

      // 初始化地图,用城市名设置地图中心点
      map.centerAndZoom("上海",12);
      map.enableScrollWheelZoom(true);
      //两秒后开启惯性拖拽
      // map.enableInertialDragging();
      // 获取当前定位
      geolocation.getLocation(showPosition, showErr, options)
      var positionNum = 0;
      var options = {timeout: 80000};
      function showPosition(r) {
        console.log(r);
        var x_pi=3.14159265358979324;
        var x = r.lng;
        var y = r.lat;
        var z = Math.sqrt(x * x + y * y) + 0.00002 * Math.sin(y * x_pi);
        var theta = Math.atan2(y, x) + 0.000003 * Math.cos(x * x_pi);
        var bd_lon = z * Math.cos(theta) + 0.0065;
        var bd_lat = z * Math.sin(theta) + 0.00670;

        var ptt = new BMap.Point(bd_lon, bd_lat);
        var myIcon = new BMap.Icon("<%= image_url "location_circle.png" %>", new BMap.Size(60, 60));

        var marker = new BMap.Marker(ptt, {icon: myIcon});
        map.addOverlay(marker);
        map.panTo(ptt);
      };
      function showErr() {
        document.getElementById("map_container").innerHTML = "定位失败！";
      };
      // 添加灾情图标
      for(var i = 0; i < disasters.length; i++) {
        addmarker(disasters[i],map)
      }
      // 地图未加载时，，重新加载
      if($("#map_container div").length == 0) {
        window.location.reload();
      }
    }
    
    // ===========android 或 web 端地图初始化=============
    function init_data(map) {
      var geolocation = new BMap.Geolocation();
      var myIcon;
      var ptt;
      var marker;

      // 初始化地图,用城市名设置地图中心点
      map.centerAndZoom("上海",12);      
      map.enableScrollWheelZoom(true);
      //两秒后开启惯性拖拽
      map.enableInertialDragging();
      // 获取当前定位
      geolocation.getCurrentPosition(function(r){
        if(this.getStatus() == BMAP_STATUS_SUCCESS){
          // 添加自定义位置图标
          myIcon = new BMap.Icon("<%= image_url "location_circle.png" %>", new BMap.Size(60, 60));
          ptt = new BMap.Point(r.point.lng, r.point.lat);
          // 创建标注对象并添加到地图
          marker = new BMap.Marker(ptt, {icon: myIcon});
          map.addOverlay(marker);
          map.panTo(ptt);
        }
        else {
          alert('failed'+this.getStatus());
        }        
      },{enableHighAccuracy: true})
      // 添加灾情图标
      for(var i = 0; i < disasters.length; i++) {
        addmarker(disasters[i],map)
      }
      // 地图未加载时，，重新加载
      if($("#map_container div").length == 0) {
        window.location.reload();
      }
    }

    // 更新灾情点位数据，添加点位标注
    function addmarker(obj, map) {
      var myIcon = new BMap.Icon("../assets/images/water_area.png", new BMap.Size(30,35));
      var lanlat = new BMap.Point(obj.disaster_position.lon, obj.disaster_position.lat);
      console.log("灾情点")
      console.dir(lanlat)

      var sContent = "";
      if (obj.pictures[0]) {
        sContent ="<div class='text-center'>"+
              "<div>时间:"+obj.occur_time+"</div>"+
              "<div style='word-break:break-all;width:200px;'>说明:"+obj.explain+"</div>"+
              "<div>"+"<a style='color:red;' href='/disasters/"+obj.id+"'>详细说明</a>"+"</div>"+
              "<img id='imgDemo' style='text-align:center;height:100px;width:100px;' src='"+obj.pictures[0].url+"'/>"+"</div>";
        console.log(obj.pictures[0].url);
      } else {
        sContent ="<div class='text-center'>"+
              "<div>时间:"+obj.occur_time+"</div>"+
              "<div style='word-break:break-all;width:200px;'>说明:"+obj.explain+"</div>"+
              "<div>"+"<a style='color:red;' href='/disasters/"+obj.id+"'>详细说明</a>"+"</div>"+
              "<div><a style='color: blue;' href='/disaster_pictures/new?disaster_id="+obj.id+"'>上传灾情图片</a></div>";
      }
      var marker;
      var infoWindow
      // 使用不同的灾情图标
      if(obj.disaster_position === null){ return; }
      if(obj.type=="暴雨"){
        var icon = new BMap.Icon("<%= asset_path 'rain_icon.png' %>", new BMap.Size(30,35));
      }else if(obj.type=="雷电"){
        var icon = new BMap.Icon("<%= asset_path 'thunder_icon.png' %>", new BMap.Size(30,35));
      }else if(obj.type=="大风"){
        var icon = new BMap.Icon("<%= asset_path 'win_icon.png' %>", new BMap.Size(30,35));
      }else{
        var icon = new BMap.Icon("<%= asset_path 'other_icon.png' %>", new BMap.Size(30,35));
      }
      // 添加标注点
      marker = new BMap.Marker(lanlat,{icon:icon});
      // 创建信息窗口对象
      infoWindow = new BMap.InfoWindow(sContent);
      // 打点
      map.addOverlay(marker);
      marker.addEventListener("click", function(){         
         this.openInfoWindow(infoWindow);
         // 图片加载完毕重绘infowindow
         document.getElementById('imgDemo').onload = function (){
           // 防止在网速较慢，图片未加载时，生成的信息框高度比图片的总高度小，导致图片部分被隐藏
           infoWindow.redraw();
         }
      });
    }

    // 处理易积水点
    function handleWaterPoint(map) {
      var areaBtn = $("#water_area");
      var roadBtn = $("#water_road");
      var show_water_area = false;
      var show_water_road = false;

      // 处理易积水小区按钮点击事件
      handleAreaToggle(show_water_area, areaBtn, map);
      // 处理易积水道路按钮点击事件
      handleRoadToggle(show_water_road, roadBtn, map);
    }
      
    // 处理易积水小区按钮点击事件
    function handleAreaToggle(show_water_area, areaBtn, map) {
      var point;
      var marker;
      var roadIcon = new BMap.Icon("<%= image_url "water_area_icon.png" %>", new BMap.Size(24, 24));
      var overlays = [];
      var opts = {
        width : 200,     // 信息窗口宽度
        height: 100,     // 信息窗口高度
      };
      // 获取本地存储的易积水小区数据
      $.getJSON("/area_water_point.json", function(data) {
        console.log(data)
        areaBtn.click(function(){
          if(show_water_area) {
            show_water_area = false;
            areaBtn.removeClass("active");
            overlays.forEach(function(overlay, i, overlays) {
              map.removeOverlay(overlay);
            })
          } else {
            show_water_area = true;
            areaBtn.addClass("active");
            // 循环打点
            for (var i = 0; i < data.length; i++) {
              point = new BMap.Point(data[i].lon, data[i].lat);
              marker = new BMap.Marker(point, {icon: roadIcon});
              map.addOverlay(marker);
              overlays.push(marker);
              // 添加信息窗口
              var content = "<h5 style='color: #4A90E2;'>易积水小区</h5>"+"<h5>地址："+data[i].name+"</h5>"
              addClickWindow(content, opts, marker, map);
            }
          }
        })
      })
    }

    // 处理易积水道路按钮点击事件
    function handleRoadToggle(show_water_road, roadBtn, map) {
      var point;
      var marker;
      var roadIcon = new BMap.Icon("<%= image_url "water_road_icon.png" %>", new BMap.Size(24, 24));
      var overlays = [];
      var opts = {
        width : 200,     // 信息窗口宽度
        height: 100,     // 信息窗口高度
      };
      // 获取本地存储的易积水道路数据
      $.getJSON("/road_water_point.json", function(data) {
        console.log(data)
        roadBtn.click(function(){
          if(show_water_road) {
            show_water_road = false;
            roadBtn.removeClass("active");
            overlays.forEach(function(overlay, i, overlays) {
              map.removeOverlay(overlay);
            })
          } else {
            show_water_road = true;
            roadBtn.addClass("active");
            // 循环打点
            for (var i = 0; i < data.length; i++) {
              point = new BMap.Point(data[i].lon, data[i].lat);
              marker = new BMap.Marker(point, {icon: roadIcon});
              map.addOverlay(marker);
              overlays.push(marker);
              // 添加信息窗口
              var content = "<h5 style='color: #4A90E2;'>易积水道路</h5>"+"<h5>地址："+data[i].name+"</h5>"
              addClickWindow(content, opts, marker, map);
            }
          }
        })
      })
    }

    // 给积水点添加信息框
    function addClickWindow(content, opts, marker, map) {
      marker.addEventListener("click", function(e){
        var p = e.target;
        var poi = new BMap.Point(p.getPosition().lng, p.getPosition().lat);
        var infoWindow = new BMap.InfoWindow(content, opts);  // 创建信息窗口对象     
        map.openInfoWindow(infoWindow,poi); //开启信息窗口
      });
    }
  </script>
  <%= javascript_tag do %>
    disasters = <%= @disasters.to_json.html_safe %>
  <% end %>
<% end %>

